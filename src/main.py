import asyncio
from aiogram import Dispatcher


from aiogram.types import BotCommand
from src.bot.scheduler import setup_scheduler
from src.bot.handlers.greeting_quiz import router as greeting_router
from src.bot.handlers.daily_quiz import router as daily_router
from src.bot.handlers.nutrition_quiz import router as nutrition_router
from src.bot.handlers.body_shape_quiz import router as body_shape_router
from src.bot.handlers.supplements_quiz import router as supplements_router
from src.bot.handlers.safety_support_quiz import router as safety_support_router
from src.bot.handlers.subjective_health_quiz import router as subjective_health_router
from src.bot.handlers.awareness_quiz import router as awareness_router
from src.bot.handlers.close_enviroment_quiz import router as close_environment_router
from src.bot.handlers.tasks.running_video import router as running_video_router
from src.bot.handlers.tasks.face_photo import router as face_photo_router
from src.bot.handlers.tasks.full_height_photos import router as full_height_photo_router
from src.bot.handlers.tasks.walking_video import router as walking_router
from src.bot.handlers.tasks.feet_photo import router as feet_photo_router
from src.bot.handlers.tasks.neck_and_shoulders_video import (
    router as neck_and_shoulder_router,
)
from src.bot.handlers.tasks.squats_video import router as squats_video_router
from src.bot.handlers.tasks.picking_up_video import router as picking_up_video_router
from src.bot.handlers.tasks.hands_photos import router as hands_photo_router
from src.bot.handlers.tasks.balance_video import router as balance_video_router
from src.bot.handlers.tasks.eye_photo import router as eye_photo_router
from src.bot.handlers.tasks.plank_video import router as plank_video_router
from src.bot.handlers.timezone import router as timezone_router
from src.bot.handlers.testing import router as testing_router
from src.bot_instance import bot
from src.llm.scheduler import setup_llm_scheduler
import logging

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)


async def main():
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º (–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)"),
        BotCommand(command="set_timezone", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å"),
        BotCommand(command="greeting", description="–ù–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"),
        BotCommand(command="daily", description="–ù–∞—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∞–Ω–∫–µ—Ç—É"),
        BotCommand(command="mindfulness", description="–ù–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏"),
        BotCommand(
            command="body_measurements", description="–ù–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è"
        ),
        BotCommand(
            command="close_environment", description="–ù–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É –æ –±–ª–∏–∑–∫–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏"
        ),
        BotCommand(command="nutrition", description="–ù–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É –ø–∏—Ç–∞–Ω–∏—è"),
        BotCommand(
            command="safety", description="–ù–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
        ),
        BotCommand(
            command="subjective_health",
            description="–ù–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è",
        ),
        BotCommand(command="supplements", description="–ù–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É –¥–æ–±–∞–≤–æ–∫"),
        BotCommand(command="balance", description="–ù–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ '–ë–∞–ª–∞–Ω—Å'"),
        BotCommand(command="eye", description="–ù–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ '–ú–∏–∫—Ä–æ—Ñ–æ—Ç–æ –≥–ª–∞–∑–∞'"),
        BotCommand(command="face", description="–ù–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ '–§–æ—Ç–æ –ª–∏—Ü–∞'"),
        BotCommand(command="feet", description="–ù–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ '–§–æ—Ç–æ —Å—Ç–æ–ø'"),
        BotCommand(
            command="full_body", description="–ù–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ '–§–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç'"
        ),
        BotCommand(command="hands", description="–ù–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ '–§–æ—Ç–æ —Ä—É–∫'"),
        BotCommand(command="neck", description="–ù–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ '–í—Ä–∞—â–µ–Ω–∏–µ –≥–æ–ª–æ–≤–æ–π'"),
        BotCommand(
            command="picking_up", description="–ù–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ '–ü–æ–¥–Ω—è—Ç–∏–µ –æ–±—ä–µ–∫—Ç–∞'"
        ),
        BotCommand(command="plank", description="–ù–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ '–ü–ª–∞–Ω–∫–∞'"),
        BotCommand(command="running", description="–ù–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ '–ë–µ–≥'"),
        BotCommand(command="squats", description="–ù–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è'"),
        BotCommand(command="walking", description="–ù–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ '–•–æ–∂–¥–µ–Ω–∏–µ'"),
    ]
    await bot.set_my_commands(commands)

    dp = Dispatcher()
    setup_scheduler(bot)
    setup_llm_scheduler(bot)

    dp.include_router(greeting_router)
    dp.include_router(daily_router)
    dp.include_router(nutrition_router)
    dp.include_router(body_shape_router)
    dp.include_router(supplements_router)
    dp.include_router(safety_support_router)
    dp.include_router(subjective_health_router)
    dp.include_router(awareness_router)
    dp.include_router(close_environment_router)
    dp.include_router(running_video_router)
    dp.include_router(face_photo_router)
    dp.include_router(full_height_photo_router)
    dp.include_router(walking_router)
    dp.include_router(feet_photo_router)
    dp.include_router(neck_and_shoulder_router)
    dp.include_router(squats_video_router)
    dp.include_router(picking_up_video_router)
    dp.include_router(hands_photo_router)
    dp.include_router(balance_video_router)
    dp.include_router(eye_photo_router)
    dp.include_router(plank_video_router)
    dp.include_router(timezone_router)
    dp.include_router(testing_router)

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
