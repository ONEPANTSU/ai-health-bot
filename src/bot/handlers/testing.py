from datetime import datetime
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from src.bot.is_admin import IsAdmin
from src.db.connection import get_db_connection

router = Router()


async def set_global_testing_start_date(start_date: datetime):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    conn = await get_db_connection()
    await conn.execute(
        "INSERT INTO system_settings (setting_name, setting_value) "
        "VALUES ('testing_start_date', $1) "
        "ON CONFLICT (setting_name) DO UPDATE SET setting_value = EXCLUDED.setting_value",
        start_date.isoformat(),
    )


async def get_global_testing_start_date():
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    conn = await get_db_connection()
    date_str = await conn.fetchval(
        "SELECT setting_value FROM system_settings WHERE setting_name = 'testing_start_date'"
    )
    return datetime.fromisoformat(date_str) if date_str else None


async def update_all_users_testing_date(start_date: datetime):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞—Ç—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    conn = await get_db_connection()
    await conn.execute("UPDATE patients SET testing_start_date = $1", start_date)


async def is_testing_started():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ –Ω–∞—á–∞—Ç–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    return await get_global_testing_start_date() is not None


@router.message(Command("start_testing"), IsAdmin())
async def start_testing(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if await is_testing_started():
        start_date = await get_global_testing_start_date()
        await message.answer(
            f"‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –Ω–∞—á–∞—Ç–æ {start_date.strftime('%d.%m.%Y')}\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset_testing_date –¥–ª—è —Å–±—Ä–æ—Å–∞"
        )
        return

    start_date = datetime.now()
    await set_global_testing_start_date(start_date)
    await update_all_users_testing_date(start_date)

    await message.answer(
        f"‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞: {start_date.strftime('%d.%m.%Y %H:%M')}"
    )


@router.message(Command("set_testing_date"), IsAdmin())
async def manual_set_testing_date(message: Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä—É—á–Ω—É—é. –ü—Ä–∏–º–µ—Ä: /set_testing_date 2025-06-01"""
    parts = message.text.strip().split()

    if len(parts) != 2:
        await message.answer(
            "‚ùó –£–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ yyyy-mm-dd, –Ω–∞–ø—Ä–∏–º–µ—Ä: /set_testing_date 2025-06-01"
        )
        return

    date_str = parts[1]

    try:
        start_date = datetime.strptime(date_str, "%Y-%m-%d")
    except ValueError:
        await message.answer(
            "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π yyyy-mm-dd, –Ω–∞–ø—Ä–∏–º–µ—Ä: /set_testing_date 2025-06-01"
        )
        return

    await set_global_testing_start_date(start_date)
    await update_all_users_testing_date(start_date)

    await message.answer(
        f"‚úÖ –î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é: {start_date.strftime('%d.%m.%Y')}"
    )


@router.message(Command("check_testing_date"))
async def check_testing_date(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    start_date = await get_global_testing_start_date()
    if start_date:
        await message.answer(
            f"üìÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ: {start_date.strftime('%d.%m.%Y %H:%M')}\n"
            f"–ü—Ä–æ—à–ª–æ –¥–Ω–µ–π: {(datetime.now() - start_date).days}"
        )
    else:
        await message.answer("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç–æ")


# –í —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (patient_repository.py)
async def create_patient(
    conn, telegram_id: int, username: str = None, full_name: str = None
):
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞)"""
    testing_date = await get_global_testing_start_date()

    await conn.execute(
        """
        INSERT INTO patients (telegram_id, username, full_name, testing_start_date)
        VALUES ($1, $2, $3, $4)
        ON CONFLICT (telegram_id) DO UPDATE SET
            username = EXCLUDED.username,
            full_name = EXCLUDED.full_name
        """,
        telegram_id,
        username,
        full_name,
        testing_date,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–≤–∏—Ç—Å—è —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    )
