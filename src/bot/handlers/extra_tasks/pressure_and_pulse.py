import json
import re
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from src.bot.states import PressurePulseStates
from src.bot.utils import send_llm_advice
from src.db.connection import get_db_connection
from src.db.patient_repository import save_patient_record

router = Router()


@router.message(Command("pressure"))
async def request_pressure_pulse(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(PressurePulseStates.waiting_pressure_pulse)
    await message.answer(
        "ü©∫ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–∞–≤–ª–µ–Ω–∏—è –∏ –ø—É–ª—å—Å–∞ –≤ –ø–æ–∫–æ–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "<b>120/80 70</b>\n\n"
        "–ì–¥–µ:\n"
        "- –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ (120) - —Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ\n"
        "- –í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ (80) - –¥–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ\n"
        "- –¢—Ä–µ—Ç—å–µ —á–∏—Å–ª–æ (70) - –ø—É–ª—å—Å\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n"
        "‚Ä¢ 120/80 70\n"
        "‚Ä¢ 115 75 65\n"
        "‚Ä¢ –î–∞–≤–ª–µ–Ω–∏–µ: 130/85, –ø—É–ª—å—Å: 72 (–º–æ–∂–Ω–æ —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏)"
    )


@router.message(PressurePulseStates.waiting_pressure_pulse)
async def handle_pressure_pulse(message: Message, state: FSMContext):
    try:
        numbers = re.findall(r"\d+", message.text)

        if len(numbers) >= 3:
            systolic = int(numbers[0])
            diastolic = int(numbers[1])
            pulse = int(numbers[2])

            conn = await get_db_connection()
            answers = {
                "questionnaire_type": "pressure_pulse",
                "prompt_type": "physiology",
                "data": message.text,
                "extracted_values": {
                    "systolic": systolic,
                    "diastolic": diastolic,
                    "pulse": pulse,
                },
            }

            await save_patient_record(
                conn=conn,
                telegram_id=message.from_user.id,
                answers=json.dumps(answers, ensure_ascii=False),
                gpt_response="",
                s3_links=[],
                summary=f"–î–∞–≤–ª–µ–Ω–∏–µ: {systolic}/{diastolic}, –ü—É–ª—å—Å: {pulse}",
                is_daily=True,
            )

            await message.answer(
                f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n"
                f"‚Ä¢ –î–∞–≤–ª–µ–Ω–∏–µ: <b>{systolic}/{diastolic}</b>\n"
                f"‚Ä¢ –ü—É–ª—å—Å: <b>{pulse}</b>",
                parse_mode="HTML",
            )

            await send_llm_advice(
                message,
                answers,
                [],
            )
            await state.clear()

        else:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: 120/80 70"
            )

    except Exception as e:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        print(f"Error: {e}")
