import json

from aiogram import Router, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.types import ReplyKeyboardRemove

from src.bot.is_test_allowed import is_test_day_allowed
from src.bot.keyboards import get_gender_keyboard
from src.bot.scheduler import get_user_timezone
from src.bot.states import GreetingQuestionnaire
from src.bot.utils import send_llm_advice
from src.db.connection import get_db_connection
from src.db.patient_repository import save_patient_record, create_patient

router = Router()


async def save_greeting_data(telegram_id: int, data: dict):
    conn = await get_db_connection()
    answers = {
        "questionnaire_type": "greeting",
        "prompt_type": "subjective_health",
        "full_name": data.get("full_name"),
        "phone": data.get("phone"),
        "telegram_nick": data.get("telegram_nick"),
        "age": data.get("age"),
        "gender": data.get("gender"),
        "height": data.get("height"),
        "weight": data.get("weight"),
    }

    await save_patient_record(
        conn=conn,
        telegram_id=telegram_id,
        answers=json.dumps(answers, ensure_ascii=False),
        gpt_response="",
        s3_links=[],
        summary="–ê–Ω–∫–µ—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è",
        is_daily=False,
    )


@router.message(Command("start"))
async def handle_start(msg: Message, bot: Bot):
    conn = await get_db_connection()

    # –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    tz = await get_user_timezone(bot, msg.from_user.id)

    await create_patient(
        conn,
        telegram_id=msg.from_user.id,
        username=msg.from_user.username,
        full_name=msg.from_user.full_name,
        timezone=tz,
    )

    await msg.answer("üëã –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    await conn.close()


@router.message(Command("greeting"))
async def start_greeting(message: Message, state: FSMContext):
    if not await is_test_day_allowed("greeting"):
        await message.answer("‚è≥ –ê–Ω–∫–µ—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å–µ–≥–æ–¥–Ω—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    await message.answer(
        "–ê–ù–ö–ï–¢–ê –ü–†–ò–í–ï–¢–°–¢–í–ò–Ø\n\n–§–ò–û*:",
        reply_markup=ReplyKeyboardRemove(),
    )
    await state.set_state(GreetingQuestionnaire.FULL_NAME)


@router.message(GreetingQuestionnaire.FULL_NAME)
async def process_full_name(message: Message, state: FSMContext):
    if len(message.text.strip().split()) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é")
        return

    await state.update_data(full_name=message.text)
    await message.answer(
        "–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞* (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7...):",
        reply_markup=ReplyKeyboardRemove(),
    )
    await state.set_state(GreetingQuestionnaire.PHONE)


@router.message(GreetingQuestionnaire.PHONE)
async def process_phone(message: Message, state: FSMContext):
    if not message.text.startswith("+"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å + –≤ –Ω–∞—á–∞–ª–µ")
        return

    await state.update_data(phone=message.text)
    await message.answer(
        "–ù–∏–∫ –≤ Telegram (–±–µ–∑ @):",
        reply_markup=ReplyKeyboardRemove(),
    )
    await state.set_state(GreetingQuestionnaire.TELEGRAM_NICK)


@router.message(GreetingQuestionnaire.TELEGRAM_NICK)
async def process_telegram_nick(message: Message, state: FSMContext):
    await state.update_data(telegram_nick=message.text.replace("@", ""))
    await message.answer(
        "–í–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª–Ω—ã—Ö –ª–µ—Ç)*:",
        reply_markup=ReplyKeyboardRemove(),
    )
    await state.set_state(GreetingQuestionnaire.AGE)


@router.message(GreetingQuestionnaire.AGE)
async def process_age(message: Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) < 12 or int(message.text) > 120:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (12-120)")
        return

    await state.update_data(age=int(message.text))
    await message.answer("–ü–æ–ª*:", reply_markup=get_gender_keyboard())
    await state.set_state(GreetingQuestionnaire.GENDER)


@router.message(GreetingQuestionnaire.GENDER)
async def process_gender(message: Message, state: FSMContext):
    if message.text not in ["–ñ–µ–Ω—Å–∫–∏–π", "–ú—É–∂—Å–∫–æ–π"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
        return

    await state.update_data(gender=message.text)
    await message.answer(
        "–†–æ—Å—Ç* (–≤ —Å–º, 120-250):",
        reply_markup=ReplyKeyboardRemove(),
    )
    await state.set_state(GreetingQuestionnaire.HEIGHT)


@router.message(GreetingQuestionnaire.HEIGHT)
async def process_height(message: Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) < 120 or int(message.text) > 250:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (120-250 —Å–º)")
        return

    await state.update_data(height=int(message.text))
    await message.answer(
        "–í–µ—Å* (–≤ –∫–≥, 30-300):",
        reply_markup=ReplyKeyboardRemove(),
    )
    await state.set_state(GreetingQuestionnaire.WEIGHT)


@router.message(GreetingQuestionnaire.WEIGHT)
async def process_weight(message: Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) < 30 or int(message.text) > 300:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (30-300 –∫–≥)")
        return

    data = await state.get_data()
    q_type = "greeting"
    data["questionnaire_type"] = q_type

    await save_greeting_data(message.from_user.id, data)

    await message.answer(
        "‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
        f"–§–ò–û: {data['full_name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–ù–∏–∫: @{data['telegram_nick']}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
        f"–ü–æ–ª: {data['gender']}\n"
        f"–†–æ—Å—Ç: {data['height']} —Å–º\n"
        f"–í–µ—Å: {message.text} –∫–≥",
        reply_markup=ReplyKeyboardRemove(),
    )
    await send_llm_advice(message, data, [])
    await state.clear()
