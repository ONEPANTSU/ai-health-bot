from aiogram import Bot
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from src.db.connection import get_db_connection

scheduler = AsyncIOScheduler()


async def get_user_timezone(user_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = await get_db_connection()
        tz = await conn.fetchval(
            "SELECT timezone FROM patients WHERE telegram_id = $1", user_id
        )
        return tz if tz else "Europe/Moscow"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}")
        return "Europe/Moscow"


async def send_daily_reminder(bot: Bot):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    conn = await get_db_connection()
    active_users = await conn.fetch(
        "SELECT telegram_id FROM patients WHERE is_active = true"
    )

    for user in active_users:
        try:
            await bot.send_message(
                chat_id=user["telegram_id"],
                text="‚è∞ –í—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∞–Ω–∫–µ—Ç—É!\n–í–≤–µ–¥–∏—Ç–µ /daily —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="/daily")]], resize_keyboard=True
                ),
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['telegram_id']}: {e}")


async def send_greeting_questionnaire(bot: Bot):
    conn = await get_db_connection()
    users = await conn.fetch("""
        SELECT telegram_id FROM patients 
        WHERE NOT EXISTS (
            SELECT 1 FROM patient_history 
            WHERE patient_history.patient_id = patients.id 
            AND patient_history.answers->>'questionnaire_type' = 'greeting'
        )
        AND is_active = true
    """)

    for user in users:
        try:
            await bot.send_message(
                chat_id=user["telegram_id"],
                text="‚è∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: /greeting",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="/greeting")]],
                    resize_keyboard=True,
                ),
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['telegram_id']}: {e}")


async def send_body_questionnaire(bot: Bot):
    conn = await get_db_connection()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ –∑–∞–ø–æ–ª–Ω–∏–ª –∞–Ω–∫–µ—Ç—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    users = await conn.fetch("""
        SELECT p.telegram_id FROM patients p
        WHERE EXISTS (
            SELECT 1 FROM patient_history ph
            WHERE ph.patient_id = p.id
            AND ph.answers->>'questionnaire_type' = 'greeting'
        )
        AND NOT EXISTS (
            SELECT 1 FROM patient_history ph
            WHERE ph.patient_id = p.id
            AND ph.answers->>'questionnaire_type' = 'body_shape'
            AND DATE(ph.created_at) = CURRENT_DATE
        )
        AND p.is_active = true
    """)

    for user in users:
        try:
            await bot.send_message(
                chat_id=user["telegram_id"],
                text="üìè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è: /body_measurements",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="/body_measurements")]],
                    resize_keyboard=True,
                ),
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['telegram_id']}: {e}")


async def send_health_questionnaire(bot: Bot):
    conn = await get_db_connection()
    users = await conn.fetch("""
        SELECT p.telegram_id FROM patients p
        WHERE p.is_active = true
        AND NOT EXISTS (
            SELECT 1 FROM patient_history ph
            WHERE ph.patient_id = p.id
            AND ph.answers->>'questionnaire_type' = 'subjective_health'
            AND DATE(ph.created_at) = CURRENT_DATE
        )
    """)

    for user in users:
        try:
            await bot.send_message(
                chat_id=user["telegram_id"],
                text="üè• –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è: /health",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="/health")]],
                    resize_keyboard=True,
                ),
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['telegram_id']}: {e}")


async def send_nutrition_questionnaire(bot: Bot):
    conn = await get_db_connection()
    users = await conn.fetch("""
        SELECT p.telegram_id FROM patients p
        WHERE p.is_active = true
        AND NOT EXISTS (
            SELECT 1 FROM patient_history ph
            WHERE ph.patient_id = p.id
            AND ph.answers->>'questionnaire_type'= 'nutrition'
            AND DATE(ph.created_at) = CURRENT_DATE
        )
    """)

    for user in users:
        try:
            await bot.send_message(
                chat_id=user["telegram_id"],
                text="üçé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –ø–∏—Ç–∞–Ω–∏—è: /nutrition",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="/nutrition")]],
                    resize_keyboard=True,
                ),
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['telegram_id']}: {e}")


async def send_supplements_questionnaire(bot: Bot):
    conn = await get_db_connection()
    users = await conn.fetch("""
        SELECT p.telegram_id FROM patients p
        WHERE p.is_active = true
        AND NOT EXISTS (
            SELECT 1 FROM patient_history ph
            WHERE ph.patient_id = p.id
            AND ph.answers->>'questionnaire_type' = 'supplements'
            AND DATE(ph.created_at) = CURRENT_DATE
        )
    """)

    for user in users:
        try:
            await bot.send_message(
                chat_id=user["telegram_id"],
                text="üíä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –ø—Ä–∏–µ–º–∞ –ë–ê–î–æ–≤/–≤–∏—Ç–∞–º–∏–Ω–æ–≤: /supplements",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="/supplements")]
                    ],
                    resize_keyboard=True,
                ),
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['telegram_id']}: {e}")


async def send_awareness_quiz(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∫–µ—Ç—ã –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏ (–º–µ–¥–∏—Ç–∞—Ü–∏–∏)"""
    conn = await get_db_connection()
    users = await conn.fetch("""
        SELECT p.telegram_id FROM patients p
        WHERE p.is_active = true
        AND NOT EXISTS (
            SELECT 1 FROM patient_history ph
            WHERE ph.patient_id = p.id
            AND ph.answers->>'questionnaire_type' = 'mindfulness'
            AND DATE(ph.created_at) = CURRENT_DATE
        )
    """)

    for user in users:
        try:
            await bot.send_message(
                chat_id=user["telegram_id"],
                text="üßò –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏ (–º–µ–¥–∏—Ç–∞—Ü–∏–∏): /mindfulness",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="/mindfulness")]],
                    resize_keyboard=True,
                ),
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['telegram_id']}: {e}")


async def send_supplements_quiz(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∫–µ—Ç—ã –ø–æ –ë–ê–î–∞–º/–≤–∏—Ç–∞–º–∏–Ω–∞–º"""
    conn = await get_db_connection()
    users = await conn.fetch("""
        SELECT p.telegram_id FROM patients p
        WHERE p.is_active = true
        AND NOT EXISTS (
            SELECT 1 FROM patient_history ph
            WHERE ph.patient_id = p.id
            AND ph.answers->>'questionnaire_type' = 'supplements'
            AND DATE(ph.created_at) = CURRENT_DATE
        )
    """)

    for user in users:
        try:
            await bot.send_message(
                chat_id=user["telegram_id"],
                text="üíä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –ø–æ –ë–ê–î–∞–º/–≤–∏—Ç–∞–º–∏–Ω–∞–º: /supplements",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="/supplements")]],
                    resize_keyboard=True,
                ),
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['telegram_id']}: {e}")


async def send_safety_support_quiz(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∫–µ—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    conn = await get_db_connection()
    users = await conn.fetch("""
        SELECT p.telegram_id FROM patients p
        WHERE p.is_active = true
        AND NOT EXISTS (
            SELECT 1 FROM patient_history ph
            WHERE ph.patient_id = p.id
            AND ph.answers->>'questionnaire_type' = 'safety_support'
            AND DATE(ph.created_at) = CURRENT_DATE
        )
    """)

    for user in users:
        try:
            await bot.send_message(
                chat_id=user["telegram_id"],
                text="üõ°Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: /safety",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="/safety")]],
                    resize_keyboard=True,
                ),
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['telegram_id']}: {e}")


async def send_close_environment_quiz(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∫–µ—Ç—ã –±–ª–∏–∑–∫–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    conn = await get_db_connection()
    users = await conn.fetch("""
        SELECT p.telegram_id FROM patients p
        WHERE p.is_active = true
        AND NOT EXISTS (
            SELECT 1 FROM patient_history ph
            WHERE ph.patient_id = p.id
            AND ph.answers->>'questionnaire_type' = 'close_environment'
            AND DATE(ph.created_at) = CURRENT_DATE
        )
    """)

    for user in users:
        try:
            await bot.send_message(
                chat_id=user["telegram_id"],
                text="üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –±–ª–∏–∑–∫–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è: /close_environment",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="/close_environment")]],
                    resize_keyboard=True,
                ),
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['telegram_id']}: {e}")


def setup_scheduler(bot: Bot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    scheduler.add_job(
        send_daily_reminder,
        "cron",
        hour=10,
        minute=0,
        args=[bot],
        timezone="Europe/Moscow",
        id="daily_reminder",
        replace_existing=True,
    )
    scheduler.add_job(
        send_greeting_questionnaire,
        "cron",
        day=1,
        hour=10,
        minute=0,
        args=[bot],
        timezone="Europe/Moscow",
        id="monthly_greeting",
        replace_existing=True,
    )
    scheduler.add_job(
        send_health_questionnaire,
        "cron",
        day=4,
        hour=19,
        minute=0,
        args=[bot],
        timezone="Europe/Moscow",
        id="monthly_health",
        replace_existing=True,
    )
    scheduler.add_job(
        send_nutrition_questionnaire,
        "cron",
        day="5,8",
        hour=19,
        minute=0,
        args=[bot],
        timezone="Europe/Moscow",
        id="monthly_nutrition",
        replace_existing=True,
    )
    scheduler.add_job(
        send_body_questionnaire,
        "cron",
        day=10,
        hour=18,
        minute=30,
        args=[bot],
        timezone="Europe/Moscow",
        id="monthly_body",
    )

    scheduler.add_job(
        send_supplements_questionnaire, "cron", day=11, hour=19, minute=0, args=[bot]
    )
    scheduler.add_job(
        send_awareness_quiz,
        "cron",
        day=14,
        hour=18,
        minute=30,
        args=[bot],
        timezone="Europe/Moscow",
        id="monthly_awareness",
    )
    scheduler.add_job(
        send_safety_support_quiz,
        "cron",
        day=16,
        hour=19,
        minute=0,
        args=[bot],
        timezone="Europe/Moscow",
        id="monthly_safety_support",
    )
    scheduler.add_job(
        send_close_environment_quiz,
        "cron",
        day=18,
        hour=19,
        minute=0,
        args=[bot],
        timezone="Europe/Moscow",
        id="monthly_close_environment",
    )

    scheduler.start()
